{"version":3,"sources":["components/login/login.js","components/add-story/add-story.js","components/view-story/view-story.js","components/dashboard/dashboard.js","shared/loader/loader.js","components/home/home.js","shared/header/header.js","app.js","serviceWorker.js","index.js"],"names":["Login","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rSelected","onRemmemberMeClick","bind","assertThisInitialized","inherits","createClass","key","value","selected","setState","_this2","react_default","a","createElement","className","Form","FormGroup","Label","for","Input","type","name","id","placeholder","check","onClick","active","Button","color","size","block","Component","AddStory","editorState","EditorState","createEmpty","focus","refs","editor","onChange","handleKeyCommand","_handleKeyCommand","mapKeyToEditorCommand","_mapKeyToEditorCommand","toggleBlockType","_toggleBlockType","toggleInlineStyle","_toggleInlineStyle","command","newState","RichUtils","e","keyCode","getDefaultKeyBinding","newEditorState","onTab","blockType","inlineStyle","contentState","getCurrentContent","hasText","getBlockMap","first","getType","add_story_BlockStyleControls","onToggle","add_story_InlineStyleControls","Draft","blockStyleFn","getBlockStyle","customStyleMap","styleMap","keyBindingFn","ref","spellCheck","Row","Col","CODE","backgroundColor","fontFamily","fontSize","padding","StyleButton","preventDefault","style","onMouseDown","label","React","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","map","add_story_StyleButton","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","ViewStory","apply","arguments","alt","src","class","Dashboard","toggle","activeTab","tab","md","Nav","tabs","NavItem","classnames","NavLink","TabContent","TabPane","tabId","view_story_ViewStory","add_story_AddStory","Loader","Home","BrowserRouter","react","fallback","loader_Loader","Switch","Route","exact","path","component","Header","App","Container","header_Header","home_home","Boolean","window","location","hostname","match","ReactDOM","render","src_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a16c8895.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport './login.css';\r\n\r\nexport class Login extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.state = { rSelected: false };\r\n\r\n    this.onRemmemberMeClick = this.onRemmemberMeClick.bind(this);\r\n  }\r\n\r\n  onRemmemberMeClick(selected) {\r\n    this.setState({ rSelected: !selected });\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"login float-right\">\r\n        <Form>\r\n          <FormGroup>\r\n            <Label for=\"emailId\">Email</Label>\r\n            <Input type=\"email\" name=\"email\" id=\"emailId\" placeholder=\"Email\" />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"password\">Password</Label>\r\n            <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\" />\r\n          </FormGroup>\r\n          <FormGroup check>\r\n            <Label check>\r\n              <Input type=\"checkbox\" onClick={() => this.onRemmemberMeClick()} active={this.state.rSelected ? 'true' : 'false'}/>{' '}\r\n              Remmember Me\r\n          </Label>\r\n          </FormGroup>\r\n          <Button color=\"primary\" size=\"lg\" block className=\"form-submit-button\">Submit</Button>\r\n        </Form>\r\n      </section>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Editor, EditorState, RichUtils, getDefaultKeyBinding } from 'draft-js';\r\nimport { Button, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap';\r\nimport './add-story.css';\r\n\r\nexport class AddStory extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { editorState: EditorState.createEmpty() };\r\n        this.focus = () => this.refs.editor.focus();\r\n        this.onChange = (editorState) => this.setState({ editorState });\r\n        this.handleKeyCommand = this._handleKeyCommand.bind(this);\r\n        this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\r\n        this.toggleBlockType = this._toggleBlockType.bind(this);\r\n        this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\r\n    }\r\n    _handleKeyCommand(command, editorState) {\r\n        const newState = RichUtils.handleKeyCommand(editorState, command);\r\n        if (newState) {\r\n            this.onChange(newState);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    _mapKeyToEditorCommand(e) {\r\n        if (e.keyCode === 9 /* TAB */) {\r\n            const newEditorState = RichUtils.onTab(\r\n                e,\r\n                this.state.editorState,\r\n                4, /* maxDepth */\r\n            );\r\n            if (newEditorState !== this.state.editorState) {\r\n                this.onChange(newEditorState);\r\n            }\r\n            return;\r\n        }\r\n        return getDefaultKeyBinding(e);\r\n    }\r\n    _toggleBlockType(blockType) {\r\n        this.onChange(\r\n            RichUtils.toggleBlockType(\r\n                this.state.editorState,\r\n                blockType\r\n            )\r\n        );\r\n    }\r\n    _toggleInlineStyle(inlineStyle) {\r\n        this.onChange(\r\n            RichUtils.toggleInlineStyle(\r\n                this.state.editorState,\r\n                inlineStyle\r\n            )\r\n        );\r\n    }\r\n    render() {\r\n        const { editorState } = this.state;\r\n        // If the user changes block type before entering any text, we can\r\n        // either style the placeholder or hide it. Let's just hide it now.\r\n        let className = 'RichEditor-editor';\r\n        var contentState = editorState.getCurrentContent();\r\n        if (!contentState.hasText()) {\r\n            if (contentState.getBlockMap().first().getType() !== 'unstyled') {\r\n                className += ' RichEditor-hidePlaceholder';\r\n            }\r\n        }\r\n        return (\r\n            <Form>\r\n                <FormGroup>\r\n                    <Label for=\"headingId\">Header</Label>\r\n                    <Input type=\"text\" name=\"heading\" id=\"headingId\" placeholder=\"Heading...\" />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"pictureId\">Picture</Label>\r\n                    <Input type=\"file\" name=\"picture\" id=\"pictureId\" placeholder=\"Upload...\" />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"story\">Story</Label>\r\n                    <div className=\"RichEditor-root\">\r\n                        <BlockStyleControls\r\n                            editorState={editorState}\r\n                            onToggle={this.toggleBlockType}\r\n                        />\r\n                        <InlineStyleControls\r\n                            editorState={editorState}\r\n                            onToggle={this.toggleInlineStyle}\r\n                        />\r\n                        <div className={className} onClick={this.focus}>\r\n                            <Editor\r\n                                blockStyleFn={getBlockStyle}\r\n                                customStyleMap={styleMap}\r\n                                editorState={editorState}\r\n                                handleKeyCommand={this.handleKeyCommand}\r\n                                keyBindingFn={this.mapKeyToEditorCommand}\r\n                                onChange={this.onChange}\r\n                                placeholder=\"Tell a story...\"\r\n                                ref=\"editor\"\r\n                                spellCheck={true}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </FormGroup>\r\n                <Row>\r\n                    <Col>\r\n                        <Button color=\"primary\" className=\"float-right\">Add</Button>\r\n                        <Button color=\"secondary\" className=\"float-right\">Preview</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n// Custom overrides for \"code\" style.\r\nconst styleMap = {\r\n    CODE: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.05)',\r\n        fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n        fontSize: 16,\r\n        padding: 2,\r\n    },\r\n};\r\nfunction getBlockStyle(block) {\r\n    switch (block.getType()) {\r\n        case 'blockquote': return 'RichEditor-blockquote';\r\n        default: return null;\r\n    }\r\n}\r\nclass StyleButton extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.onToggle = (e) => {\r\n            e.preventDefault();\r\n            this.props.onToggle(this.props.style);\r\n        };\r\n    }\r\n    render() {\r\n        let className = 'RichEditor-styleButton';\r\n        if (this.props.active) {\r\n            className += ' RichEditor-activeButton';\r\n        }\r\n        return (\r\n            <span className={className} onMouseDown={this.onToggle}>\r\n                {this.props.label}\r\n            </span>\r\n        );\r\n    }\r\n}\r\nconst BLOCK_TYPES = [\r\n    { label: 'H1', style: 'header-one' },\r\n    { label: 'H2', style: 'header-two' },\r\n    { label: 'H3', style: 'header-three' },\r\n    { label: 'H4', style: 'header-four' },\r\n    { label: 'H5', style: 'header-five' },\r\n    { label: 'H6', style: 'header-six' },\r\n    { label: 'Blockquote', style: 'blockquote' },\r\n    { label: 'UL', style: 'unordered-list-item' },\r\n    { label: 'OL', style: 'ordered-list-item' },\r\n    { label: 'Code Block', style: 'code-block' },\r\n];\r\nconst BlockStyleControls = (props) => {\r\n    const { editorState } = props;\r\n    const selection = editorState.getSelection();\r\n    const blockType = editorState\r\n        .getCurrentContent()\r\n        .getBlockForKey(selection.getStartKey())\r\n        .getType();\r\n    return (\r\n        <div className=\"RichEditor-controls\">\r\n            {BLOCK_TYPES.map((type) =>\r\n                <StyleButton\r\n                    key={type.label}\r\n                    active={type.style === blockType}\r\n                    label={type.label}\r\n                    onToggle={props.onToggle}\r\n                    style={type.style}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nvar INLINE_STYLES = [\r\n    { label: 'Bold', style: 'BOLD' },\r\n    { label: 'Italic', style: 'ITALIC' },\r\n    { label: 'Underline', style: 'UNDERLINE' },\r\n    { label: 'Monospace', style: 'CODE' },\r\n];\r\nconst InlineStyleControls = (props) => {\r\n    const currentStyle = props.editorState.getCurrentInlineStyle();\r\n\r\n    return (\r\n        <div className=\"RichEditor-controls\">\r\n            {INLINE_STYLES.map((type) =>\r\n                <StyleButton\r\n                    key={type.label}\r\n                    active={currentStyle.has(type.style)}\r\n                    label={type.label}\r\n                    onToggle={props.onToggle}\r\n                    style={type.style}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Col, Button } from 'reactstrap';\r\nimport './view-story.css';\r\n\r\nexport class ViewStory extends Component {\r\n    render() {\r\n        return (\r\n            <section>\r\n                <Col className=\"story-block\">\r\n                    <article className=\"user-story-container\">\r\n                        <aside className=\"user-image\">\r\n                            <img alt=\"User\" src=\"default.png\"></img>\r\n                        </aside>\r\n                        <section class=\"story-description\">\r\n                            <h4>The Needle Tree</h4>\r\n                            <div class=\"story-lines\">\r\n                                <div className=\"story-image-container\">\r\n                                    <img alt=\"Default\" src=\"default.png\"></img>\r\n                                </div>\r\n                                Brothers who lived on the edge of a forest.\r\n                                The elder brother was very mean to his younger brother and ate up all the food and took all his good clothes. One day, the elder brother went into the forest to find some firewood to sell in the market. As he went around chopping the branches of a tree after tree, he came upon a magical tree. The tree said to him, ‘Oh kind sir, please do not cut my branches. If you spare me, I will give you my golden apples’. The elder brother agreed but was disappointed with the number apples the tree gave him. Greed overcame him, and he threatened to cut the entire trunk if the tree didn’t give him more apples. The magical tree instead showered upon the elder brother hundreds upon hundreds of tiny needles. The elder brother lay on the ground crying in pain as the sun began to lower down the horizon.\r\n                                The younger brother grew worried and went in search of his elder brother. He found him with hundreds of needles on his skin. He rushed to his brother and removed each needle with painstaking love. After he finished, the elder brother apologised for treating him badly and promised to be better. The tree saw the change in the elder brother’s heart and gave them all the golden apples they could ever need.\r\n                        </div>\r\n                            <Button color=\"secondary\" className=\"read-more-button\">+ Read More</Button>\r\n                        </section>\r\n                    </article>\r\n                </Col>\r\n                <Col className=\"story-block\">\r\n                    <article className=\"user-story-container\">\r\n                        <aside className=\"user-image\">\r\n                            <img alt=\"User\" src=\"default.png\"></img>\r\n                        </aside>\r\n                        <section class=\"story-description\">\r\n                            <h4>Counting Wisely</h4>\r\n                            <div class=\"story-lines\">\r\n                                <div className=\"story-image-container\">\r\n                                    <img alt=\"Default\" src=\"default.png\"></img>\r\n                                </div>\r\n                                Akbar once put a question to his court that left everyone puzzled. As they all tried to figure out the answer, Birbal walked and asked what the matter was. And so they told him the question.\r\n\r\n    ‘How many crows are there in the city?’\r\n\r\n    Birbal immediately smiled, went up to Akbar and announced that the answer to his questions was twenty-one thousand five hundred and twenty-three. When asked how he knew the answer, Birbal replied, ‘Ask your men to count the number of crows. If there are more, then the crows’ relatives from outside the city are visiting them. If there are fewer, then the crows are visiting their relatives outside the city.’ Pleased with the answer, Akbar presented Birbal with a ruby and pearl chain.\r\n                                </div>\r\n                            <Button color=\"secondary\" className=\"read-more-button\">+ Read More</Button>\r\n                        </section>\r\n                    </article>\r\n                </Col>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Col } from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport './dashboard.css';\r\nimport { AddStory } from '../add-story/add-story';\r\nimport { ViewStory } from '../view-story/view-story';\r\n\r\nexport class Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      activeTab: 'viewStory'\r\n    };\r\n  }\r\n\r\n  toggle(tab) {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({\r\n        activeTab: tab\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"dashboard\">\r\n        <Col md=\"3\" className=\"float-left\">\r\n          <Nav tabs className=\"side-nav\">\r\n            <NavItem className={classnames({ active: this.state.activeTab === 'viewStory' })} onClick={() => { this.toggle('viewStory'); }}>\r\n              <NavLink>\r\n                View Stories\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem className={classnames({ active: this.state.activeTab === 'addStory' })} onClick={() => { this.toggle('addStory'); }}>\r\n              <NavLink>\r\n                Add New Story\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Col>\r\n        <Col md=\"9\" className=\"float-left\">\r\n          <TabContent activeTab={this.state.activeTab}>\r\n            <TabPane tabId=\"viewStory\">\r\n              <ViewStory/>\r\n            </TabPane>\r\n            <TabPane tabId=\"addStory\">\r\n              <AddStory/>\r\n            </TabPane>\r\n          </TabContent>\r\n        </Col>\r\n        <div className=\"help-section\">\r\n          <div class=\"help-identifier\">Download</div>\r\n          <div className=\"help-sub-section\">\r\n            <img alt=\"Help\" src=\"default.png\"></img>\r\n          </div>\r\n          <div className=\"help-sub-section\">\r\n            <img alt=\"Idea\" src=\"default.png\"></img>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './loader.css';\r\n\r\nexport class Loader extends Component {\r\n  render() {\r\n    return (<div>Loading.....</div>);\r\n  }\r\n}","import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport React, { Component, Suspense } from 'react';\r\nimport './home.css';\r\nimport { Login } from '../login/login';\r\nimport { Dashboard } from '../dashboard/dashboard';\r\nimport { Loader } from '../../shared/loader/loader';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"home\">\r\n        <Router>\r\n            <Suspense fallback={<Loader/>}>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Dashboard}/>\r\n                    <Route path=\"/login\" component={Login}/>\r\n                    <Route component={Dashboard}/>\r\n                </Switch>\r\n            </Suspense>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport './header.css';\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <img alt=\"Logo\" src=\"Logo.png\"></img>\r\n        <aside className=\"registration-links\">\r\n            <span>\r\n                <img alt=\"Sign Up\" src=\"Sign_Up.png\"></img>\r\n                Sign Up\r\n            </span>\r\n            <span>\r\n                <img alt=\"Sign In\" src=\"Sign_In.png\"></img>\r\n                Sign In\r\n            </span>\r\n        </aside>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Container, Row } from 'reactstrap';\nimport './app.css';\nimport Home from './components/home/home';\nimport Header from './shared/header/header';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <Row>\n          <Container className=\"app-body\">\n            <header><Header/></header>\n            <section><Home /></section>\n          </Container>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}